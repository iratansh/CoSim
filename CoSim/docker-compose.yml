version: "3.11"

services:
  postgres:
    image: postgres:15
    environment:
      POSTGRES_DB: cosim
      POSTGRES_USER: cosim
      POSTGRES_PASSWORD: cosim
    ports:
      - "5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data

  redis:
    image: redis:7
    ports:
      - "6380:6379"

  nats:
    image: nats:2
    command: ["-js"]
    ports:
      - "4222:4222"
      - "8222:8222"

  auth-agent:
    build:
      context: ./backend
    environment:
      COSIM_APP_MODULE: co_sim.agents.auth.main:app
      COSIM_PORT: 8001
      COSIM_DATABASE_URI: postgresql+asyncpg://cosim:cosim@postgres:5432/cosim
      COSIM_JWT_SECRET_KEY: supersecretvaluewith32chars000000
      COSIM_SERVICE_ENDPOINTS__AUTH_BASE_URL: http://auth-agent:8001
      COSIM_SERVICE_ENDPOINTS__PROJECT_BASE_URL: http://project-agent:8002
      COSIM_SERVICE_ENDPOINTS__SESSION_BASE_URL: http://session-orchestrator:8003
      COSIM_SERVICE_ENDPOINTS__COLLAB_BASE_URL: http://collab-agent:8004
      COSIM_REDIS_URL: redis://redis:6379/0
      COSIM_NATS_URL: nats://nats:4222
      COSIM_DEBUG: "false"
    depends_on:
      - postgres
    ports:
      - "8001:8001"

  project-agent:
    build:
      context: ./backend
    environment:
      COSIM_APP_MODULE: co_sim.agents.project_workspace.main:app
      COSIM_PORT: 8002
      COSIM_DATABASE_URI: postgresql+asyncpg://cosim:cosim@postgres:5432/cosim
      COSIM_JWT_SECRET_KEY: supersecretvaluewith32chars000000
      COSIM_SERVICE_ENDPOINTS__AUTH_BASE_URL: http://auth-agent:8001
      COSIM_SERVICE_ENDPOINTS__PROJECT_BASE_URL: http://project-agent:8002
      COSIM_SERVICE_ENDPOINTS__SESSION_BASE_URL: http://session-orchestrator:8003
      COSIM_SERVICE_ENDPOINTS__COLLAB_BASE_URL: http://collab-agent:8004
      COSIM_REDIS_URL: redis://redis:6379/0
      COSIM_NATS_URL: nats://nats:4222
      COSIM_DEBUG: "false"
    depends_on:
      - postgres
    ports:
      - "8002:8002"

  session-orchestrator:
    build:
      context: ./backend
    environment:
      COSIM_APP_MODULE: co_sim.agents.session_orchestrator.main:app
      COSIM_PORT: 8003
      COSIM_DATABASE_URI: postgresql+asyncpg://cosim:cosim@postgres:5432/cosim
      COSIM_JWT_SECRET_KEY: supersecretvaluewith32chars000000
      COSIM_SERVICE_ENDPOINTS__AUTH_BASE_URL: http://auth-agent:8001
      COSIM_SERVICE_ENDPOINTS__PROJECT_BASE_URL: http://project-agent:8002
      COSIM_SERVICE_ENDPOINTS__SESSION_BASE_URL: http://session-orchestrator:8003
      COSIM_SERVICE_ENDPOINTS__COLLAB_BASE_URL: http://collab-agent:8004
      COSIM_REDIS_URL: redis://redis:6379/0
      COSIM_NATS_URL: nats://nats:4222
      COSIM_DEBUG: "false"
    depends_on:
      - postgres
      - project-agent
    ports:
      - "8003:8003"

  collab-agent:
    build:
      context: ./backend
    environment:
      COSIM_APP_MODULE: co_sim.agents.collab.main:app
      COSIM_PORT: 8004
      COSIM_JWT_SECRET_KEY: supersecretvaluewith32chars000000
      COSIM_SERVICE_ENDPOINTS__AUTH_BASE_URL: http://auth-agent:8001
      COSIM_SERVICE_ENDPOINTS__PROJECT_BASE_URL: http://project-agent:8002
      COSIM_SERVICE_ENDPOINTS__SESSION_BASE_URL: http://session-orchestrator:8003
      COSIM_SERVICE_ENDPOINTS__COLLAB_BASE_URL: http://collab-agent:8004
      COSIM_REDIS_URL: redis://redis:6379/0
      COSIM_NATS_URL: nats://nats:4222
      COSIM_DEBUG: "false"
    depends_on:
      - auth-agent
    ports:
      - "8004:8004"

  yjs-collab-server:
    build:
      context: ./collab-server
    environment:
      PORT: 1234
      PERSISTENCE_DIR: /data
    ports:
      - "1234:1234"
    volumes:
      - yjs_data:/data
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:1234/health', (r) => { process.exit(r.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 5s

  api-gateway:
    build:
      context: ./backend
    environment:
      COSIM_APP_MODULE: co_sim.agents.api_gateway.main:app
      COSIM_PORT: 8000
      COSIM_DATABASE_URI: postgresql+asyncpg://cosim:cosim@postgres:5432/cosim
      COSIM_JWT_SECRET_KEY: supersecretvaluewith32chars000000
      COSIM_SERVICE_ENDPOINTS__AUTH_BASE_URL: http://auth-agent:8001
      COSIM_SERVICE_ENDPOINTS__PROJECT_BASE_URL: http://project-agent:8002
      COSIM_SERVICE_ENDPOINTS__SESSION_BASE_URL: http://session-orchestrator:8003
      COSIM_SERVICE_ENDPOINTS__COLLAB_BASE_URL: http://collab-agent:8004
      COSIM_REDIS_URL: redis://redis:6379/0
      COSIM_NATS_URL: nats://nats:4222
      COSIM_DEBUG: "false"
    depends_on:
      - auth-agent
      - project-agent
      - session-orchestrator
      - collab-agent
    ports:
      - "8080:8000"

  webrtc-signaling:
    build:
      context: ./webrtc-signaling
    ports:
      - "3000:3000"
      - "3001:3001"
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3001/health"]
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 5s

  simulation-agent:
    build:
      context: ./backend
    environment:
      COSIM_APP_MODULE: co_sim.agents.simulation.main:app
      COSIM_PORT: 8005
      COSIM_DATABASE_URI: postgresql+asyncpg://cosim:cosim@postgres:5432/cosim
      COSIM_JWT_SECRET_KEY: supersecretvaluewith32chars000000
      COSIM_SERVICE_ENDPOINTS__AUTH_BASE_URL: http://auth-agent:8001
      COSIM_SERVICE_ENDPOINTS__PROJECT_BASE_URL: http://project-agent:8002
      COSIM_SERVICE_ENDPOINTS__SESSION_BASE_URL: http://session-orchestrator:8003
      COSIM_SERVICE_ENDPOINTS__COLLAB_BASE_URL: http://collab-agent:8004
      COSIM_SERVICE_ENDPOINTS__SIMULATION_BASE_URL: http://simulation-agent:8005
      COSIM_REDIS_URL: redis://redis:6379/0
      COSIM_NATS_URL: nats://nats:4222
      COSIM_DEBUG: "false"
    depends_on:
      - postgres
    ports:
      - "8005:8005"
    volumes:
      - simulation_models:/models
    # Uncomment for GPU support (requires nvidia-docker)
    # deploy:
    #   resources:
    #     reservations:
    #       devices:
    #         - driver: nvidia
    #           count: 1
    #           capabilities: [gpu]

  chatbot-service:
    build:
      context: ./backend/services/chatbot
      dockerfile: Dockerfile
    environment:
      PYTHONUNBUFFERED: 1
      OPENAI_API_KEY: ${OPENAI_API_KEY:-}
      OLLAMA_HOST: http://host.docker.internal:11434
      OLLAMA_MODEL: llama3.2
    ports:
      - "8006:8006"
    volumes:
      - chatbot_data:/app/chroma_db
      - ./backend/services/chatbot:/app
    extra_hosts:
      - "host.docker.internal:host-gateway"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8006/health"]
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 10s

  web:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    environment:
      VITE_API_BASE_URL: /api
      VITE_COLLAB_WS_URL: ws://localhost:1234
      VITE_WEBRTC_SIGNALING_URL: ws://localhost:3000
      VITE_SIMULATION_API_URL: http://localhost:8005
      VITE_CHATBOT_API_URL: http://localhost:8006
    ports:
      - "5173:5173"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    depends_on:
      - api-gateway
      - yjs-collab-server
      - webrtc-signaling
      - simulation-agent
      - chatbot-service

volumes:
  postgres_data:
  yjs_data:
  simulation_models:
  chatbot_data:
