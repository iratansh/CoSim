# CoSim - Cloud Robotics Development Platform

## Product Overview
CoSim is a browser-based collaborative robotics development platform that enables instant, shared environments for robotics simulation and development. It provides first-class support for C++ and Python, with integrated MuJoCo and PyBullet simulators.

## Key Features

### Instant Collaborative Environments
- 1-click launch of collaborative IDE and simulator
- Multiple users can join to edit code and view the same simulation in real time
- Browser-based access with no local installation required
- Real-time code collaboration using Yjs CRDT technology

### Language Support
- First-class C++ support with clang/gcc toolchains, CMake, and debugging (gdb/lldb)
- First-class Python support with virtual environments, pip/poetry dependency management
- Support for mixed C++/Python projects

### Simulation Engines
- MuJoCo 3 simulator with optional MJX GPU acceleration
- PyBullet physics simulation
- WebRTC streaming for low-latency simulation viewing
- Headless and rendering modes available

### Task-Focused Workflows

#### SLAM (Simultaneous Localization and Mapping)
- Dataset mounting and management (KITTI, TUM formats)
- Rosbag playback support
- Built-in metrics calculation (ATE, RPE)
- ORB-SLAM2 baseline implementations
- Trajectory alignment and visualization

#### Reinforcement Learning
- Parallel environment orchestration
- Experience collection and training loops
- Support for Stable Baselines3, JAX, and PyTorch
- Checkpoint management to S3/cloud storage
- TensorBoard integration for training visualization
- GPU-accelerated training available

### Development Tools
- Monaco/VS Code Web editor with IntelliSense
- Integrated terminal with zsh/fish support
- File tree and workspace management
- Git integration with git-lfs support
- Build caching with sccache for C++
- Python wheel caching for faster installs

### GPU Support
- Optional GPU allocation for RL training
- NVIDIA Container Runtime support
- A10, 3090, and Ada GPU options
- CPU-only mode for fast boot and prototyping

### Resource Management
- Auto-hibernation for idle sessions
- Configurable CPU and memory allocation
- Session timeout management
- Cost monitoring and quota enforcement

## How It Works

### Session Creation
1. User creates or opens a project
2. Platform provisions an IDE Pod and Sim Pod in Kubernetes
3. Collaboration server creates Yjs documents for real-time editing
4. WebRTC connection established for simulation streaming
5. User can invite collaborators to join the session

### Build and Run Workflow
1. Write code in the browser-based Monaco editor
2. For C++: Build Agent compiles code with CMake and caching
3. For Python: Python Agent manages virtual environments and dependencies
4. Code changes are hot-reloaded in the simulation
5. View real-time simulation results via WebRTC stream

### RL Training Workflow
1. Configure RL job with algorithm (PPO, SAC) and parameters
2. RL Agent provisions GPU pod if requested
3. Parallel environments spin up (N workers)
4. Training runs with checkpoint saving to S3
5. Monitor progress with TensorBoard
6. Evaluate trained models in simulation

### SLAM Experiment Workflow
1. Upload or select dataset (rosbag, KITTI, TUM)
2. Choose SLAM pipeline (ORB-SLAM2, LOAM, custom)
3. SLAM Agent mounts dataset and runs pipeline
4. Compute metrics (ATE, RPE, trajectory plots)
5. Download results and visualizations

## Pricing Tiers

### Free Tier
- CPU-only sessions (2 vCPU, 4 GB RAM)
- 20 hours per month
- 2 GB storage
- Community support

### Student Tier
- Up to 4 vCPU, 8 GB RAM
- Optional GPU minutes for learning
- 10 GB storage
- Priority support

### Pro Tier
- Adjustable CPU/GPU resources
- Unlimited hours
- Shared team storage
- GPU concurrency controls
- Advanced collaboration features

### Teams/Enterprise
- Custom resource allocation
- Organization workspaces
- SSO integration
- Audit logs and compliance
- Dedicated support

## Security Features
- Isolated Kubernetes namespaces per session
- mTLS for inter-service communication
- JWT authentication with short TTL
- KMS-encrypted secrets
- At-rest and in-transit encryption
- Network policies and firewalls
- Abuse detection for crypto mining

## Technical Architecture

### Control Plane
- API Gateway: Single entry point with auth and quotas
- Session Orchestrator: Pod scheduling and lifecycle management
- Collaboration Agent: Multi-user editing with Yjs CRDT
- Billing Agent: Usage tracking and cost monitoring
- Cost Guard: Policy enforcement for runaway costs

### Data Plane
- IDE Pods: Code editor, file system, terminal
- Sim Pods: MuJoCo/PyBullet simulation with WebRTC streaming
- Build Agent: C++ compilation with remote caching
- Python Agent: Virtual environment and package management
- RL Agent: Parallel training orchestration
- SLAM Agent: Dataset processing and metrics

### Infrastructure
- Kubernetes (EKS/GKE) with CPU and GPU node pools
- Postgres for metadata
- Redis for queues and caching
- S3/GCS for files, datasets, and checkpoints
- WebRTC SFU for video streaming
- Prometheus and Grafana for monitoring

## Use Cases

### Robotics Education
- Teach SLAM algorithms with real datasets
- RL course assignments with automatic grading
- Collaborative student projects
- No local setup required for students

### Research Projects
- Quick prototyping of new algorithms
- Reproducible experiments with snapshots
- Collaboration across institutions
- GPU access without local hardware

### Algorithm Development
- Develop and test SLAM pipelines
- Train RL agents on custom environments
- Benchmark against baseline implementations
- Share results with team members

### Robotics Competitions
- Practice environments for competitions
- Team collaboration on solutions
- Version control and experimentation
- Performance optimization with metrics

## Getting Started

1. Sign up for a free account at cosim.dev
2. Create your first project
3. Choose a template (RL, SLAM, or Empty)
4. Launch a workspace session
5. Start coding in the browser
6. View your simulation in real-time
7. Invite team members to collaborate

## Support
- Documentation: docs.cosim.dev
- Community Discord: discord.gg/cosim
- Email: support@cosim.dev
- GitHub Issues: github.com/cosim/platform

## Roadmap

### Phase 1 (Current)
- CPU-only clusters
- Python and PyBullet support
- Basic collaboration with Yjs
- WebRTC streaming

### Phase 2 (Q1 2026)
- Full C++ build support with MuJoCo
- SLAM agent with dataset mounting
- GPU pools for RL training
- Snapshot and restore features

### Phase 3 (Q2 2026)
- Organization workspaces
- Educational features (grading, roster sync)
- Public template sharing
- Advanced cost controls

### Phase 4 (Future)
- VR/XR support for immersive simulation
- Additional simulators (Gazebo, Isaac Sim)
- Multi-robot coordination scenarios
- Mobile app for monitoring

## Differentiators

- **Collaboration-First**: Real-time multi-user editing unlike traditional cloud IDEs
- **Task-Specific**: Opinionated templates and workflows for SLAM and RL
- **GPU-Aware**: Simple controls to request GPU when needed, fast CPU boot
- **Safe and Cost-Guarded**: Strict quotas, auto-hibernate, spot-friendly
- **Browser-Based**: No installation, works on any device
- **Education-Focused**: Built for teaching robotics and ML courses

## Technology Stack
- Frontend: React, TypeScript, Monaco Editor, Yjs, WebRTC
- Backend: FastAPI (Python), gRPC, Celery/RQ
- Infrastructure: Kubernetes, Docker, NVIDIA Runtime
- Simulators: MuJoCo 3, PyBullet
- Storage: Postgres, Redis, S3
- Monitoring: Prometheus, Grafana, OpenTelemetry
